回顧：

当需要重复使用某一段代码时？
重复复制代码到需要的地方
把代码放到某一个地方 当需要使用时执行代码

函数概念
为解决重复执行某种功能的代码设计的
优点
提高程序的模块化
提高代码的复用率

Python函数的分类
  Python內建函数
  自定义函数

函数的定义与使用
语法
def 函数名(参数列表):
    "函数文档字符串"
    函数语句块

def mymax(a,b):
    if a > b:
        print('a比b大')
    else:
        print('b比a大')

return语句
函数返回语句
函数体内只要遇到return语句 函数就会停止执行后面的代码
返回return语句后面的值给函数调用者
所有的函数都有返回值 如果没写return语句 默认返回None

练习：
定义一个两个数字相加的函数 返回相加的结果
#获取输入
num1 = int(input('请输入第一个数字'))
num2 = int(input('请输入第二个数字'))
#逻辑运算
result = num1 + num2
#显示结果
print(result)

def myadd():
    num1 = int(input('请输入第一个数字'))
    num2 = int(input('请输入第二个数字'))
    #逻辑运算
    result = num1 + num2
    #显示结果
    print(result)


练习：
定义函数 判断列表中是否存在相同的元素

练习：
定义函数 根据年和月 计算有多少天  考虑2月闰年29天 平年28天

def get_day(year,month):
     pass

get_day(2019,6)#30
休息10:30~10:45


python函数的参数传递
参数分为两种
定义函数时 写在()中的叫做形式参数 简称形参
调用函数时 写在()中的叫做实际参数 简称实参

函数的参数传递方式：
位置传参
def mysum(num1,num2):
   pass

mysum(10,20)
关键字传参

函数综合传参
1.函数传参过程 中 只要确定一个形参能匹配到唯一一个实参
就可以任意组合使用传参方式
2.函数的位置传参要先于关键字传参
函数缺省参数
def fun(形参名1=默认实参1,形参名2=默认实参2,...):
    pass

fun()#不写实参 表示使用默认实参
fun(实参1,实参2,...)#形参1=实参1...
get_second.py

函数形参的定义方式：
  位置形参
  星号元组形参
  命名关键字形参
  双星号字典形参

星号元组形参
用*将所有多余的实参合并为一个元组，让实参的个数无限
def fun2(a,b,*args):
    print(args)

定义函数mysum 求任意多的数字的和
def mysum(*args):
    print(sum(args))


命名关键字形参
在星号元组形参以后的位置形参  要求实参必须使用关键字实参

双星号字典形参
**目的是将关键字实参合并为字典 实参可以传递数量无限的关键字参数

位置形参、缺省形参、星号元组形参、双星号字典形参可以混合使用
使用时顺序从左到右依次为:
位置形参
星号元组形参
命名关键字形参
双星号字典形参

可以接受任意位置传参和关键字传参的函数
def fun(*args,**kwargs):
    pass

休息：14:23~14:35

全局变量 和 局部变量
全局变量
直接写在模块(py文件)中的变量被称为全局变量
a = 100
name = 'shibw'

局部变量
定义在函数内部的变量称为局部变量(形参也是属于局部变量)
def fun(a,b):
    pass


globals()和locals()函数
globals()返回当前的全局变量的字典
locals()返回当前局部变量的字典

函数变量
函数名是变量 在创建时绑定一个函数
一个函数可以作为另一个函数的实参传递
函数可以作为另一个函数的返回值

函数名 表示对应函数的引用
函数名() 表示调用对应的函数

练习：
已知有如下函数
def myadd(x,y):
    return x+y

def mysub(x,y):
    return x-y

def mymul(x,y):
    return x*y

def mydiv(x,y):
    return x/y

再写一个函数 get_fun(op) 如果传入'+' 返回myadd函数

def main():
    #s = input('请输入计算公式') # '10 + 20'
    #根据用户输入 获取x的值10 获取op '+'  获取y的值20
    #通过get_fun(op)获取对应函数 计算结果
    #打印结果

main()
休息15:23~15:35;

def是语句 可以放在任何复合语句中
函数的嵌套就是指在一个函数中用def语句创建其它函数

python3中的作用域
也叫命名空间，访问变量时查找变量名的范围

python中有四个作用域
局部作用域(局部)
外部嵌套函数作用域
函数定义所在的模块的作用域(全局)
python内置模块的作用域

变量名查找规则
访问变量时 先查找局部变量 然后是包裹此函数的外部函数变量
之后找全局变量 最后找python内置变量 如果都没有报错


global语句
告诉解释器 global后声明一个或多个变量
它们的作用域为模块级作用域(全局作用域)

global 变量名1,变量名2, ...
注意：
1.不能先声明局部变量再声明为全局变量
2.参数列表中的变量不能声明为全局变量


nonlocal语句
告诉解释器,nonlocal声明的变量既不是局部变量也不是全局变量
而是外部嵌套函数内的变量
nonlocal 变量名1,...
注意
参数列表中出现的变量不能声明为外部嵌套函数变量

lambda
eval
exec













