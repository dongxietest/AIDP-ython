day09 回顾
   异常
   迭代器和生成器
   字节串和字节数组

异常
  raise  发出异常通知
     raise ValueError("类型错误....")
  assert 根据条件发送AssertionError异常通知
     assert 0 <= score <= 100, "成绩不合法"

  try-except 语句
    try:
        可能触发异常的语句
    except ValueError as err:
        发生ValueError类型异常时的语句
    except ZeroDivisionError as e:
        ...
    ....
    except:
        ....
    else:
        ....
    finally:
        ....
  try-finally语句
      try:
          可能触发异常的语句
      finally:
          必须要执行的语句
  with语句(后面才学)
    
迭代器
  迭代器 = iter(可迭代对象)
      L = [1, 2, 3]
      it = iter(L)  # it  绑定迭代器
  用迭代器获取数据用 next()函数
      值 = next(迭代器)
  next函数:
      1. 如果有值返回值
      2. 如果没有值触发StopIteration异常
  for 语句又名迭代循环语句

生成器
  1. 生成器函数
      含有yield 语句的函数
      生成器函数会在 next(it)调用时才会执行一步
  2. 生成器表达式
     (x**2 for x in range(10))
  生成器的特点:
     程序内部并不会创建大量的数据,而是在程序
     运行时根据需要动态的创建所需要数据
     好处:  占用内存少
两个函数:
   zip
   enumerate
字节串和字节数组
  都叫字节序列
  字节串bytes(不可变)
  字节数组 bytearray(可变的)

  字节是由8个位组成的存储单元
     0~255  (0 ~ 2**8-1)

内存的特点:
  速度快,价格高,断电后数据丢失

磁盘/U盘 的特点
  速度慢,价格低,断电不丢失



文件练习:
   用文本编器写一个文件 myfile1.txt
      abcdefg
      1234567
   写程序打开这个文件,读取其中的内容,在添加一个
   标题和结尾后写到另一个文件myfile2.txt中
     myfile2.txt的内容是:
     ====== 文件开始 ======
     abcdefg
     1234567
     ====== 文件结束 ======



文件操作分为两种方式:
  1. 文本文件读写方式
     't'  读写会自动进行编解码转换,只能
         对存有文字信息的文件进行读写
  2. 二进制文件读写方式
     'b'  读写不会自动进行编解码转换,只能用
         字节串和字节数组进行读写操作,此种
         方法能够读写所有文件

IO操作:
   'r' 读 (input)
   'w', 'a', 'x' 写 (output)





面向对象编程     属性     方法
面向过程编程     数据     算法(函数)


   　　毛色   种类　　　年龄（属性)
狗1:   白色   京巴      5
狗2:   黑色   导盲犬    6

行为:
   吃东西，玩，跑....
class Dog:
    def eat(self, food):
        ...

dog1 = Dog()  # 创建实例
dog2 = Dog()  # 创建实例



作业:
3. 写一个学生信息管理的程序.要求有操作界面:
    +---------------------------+
    | 1) 添加学生信息             |
    | 2) 显示所有学生信息          |
    | 3) 删除学生信息             |
    | 4) 修改学生成绩             |
    | 5) 按学生成绩高-低显示学生信息 |
    | 6) 按学生成绩低-高显示学生信息 |
    | 7) 按学生年龄高-低显示学生信息 |
    | 8) 按学生年龄低-高显示学生信息 |
    | 9) 从文件中读取数据(si.txt)  |
    | 10) 保存信息到文件(si.txt)  |
    | 11) 保存到excel文件(infos.csv)  |
    | 12) 从文件中读取excel文件(infos.csv) |
    | q) 退出                    |
    +---------------------------+
    学生信息包括: 姓名 年龄 成绩 ,每个功
    能写一个函数与之相对应,考虑将其分为模块

内部存储方式可以两种任选其一
假设有两个学生:
     zhangsan, 20, 100
     lisi, 18, 98
存储方法1:
   infos = [{'name':'zhangsan',
            'age': 20, 
            'score': 100},
            {'name':'lisi',
            'age': 18, 
            'score': 98},
            ]
存储方法2(用对像来存储):
   class Student:
        ...
   infos = [Student('zhangsan', 20, 100),
            Student('lisi', 18, 98)]

            









    





